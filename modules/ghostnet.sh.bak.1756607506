#!/bin/bash
# =============================================================================
#  GhostOps Module: ghostnet.sh
#  Purpose       : Stealth-grade MAC/IP rotation with auto-reconnect & logging
#  Author        : Kehd Emmanuel H. Diaz  (GhostOps / ghostalarm project)
#  Version       : 1.0.1
#  Date          : 2025-08-31
# -----------------------------------------------------------------------------
#  Description:
#    - Disconnects Wi-Fi interface without RF-kill
#    - Randomizes MAC address
#    - Reconnects automatically to last known SSID
#    - Supports DHCP (default) or randomized static IP assignment
#    - Logs every rotation to /home/kehd/ghostops/logs/ghostnet.log
#
#  Usage:
#    sudo ./ghostnet.sh [--iface wlan0] [--dhcp|--static]
#                       [--subnet CIDR] [--gateway IP]
#                       [--timeout SEC] [--dry-run]
#
#  Examples:
#    sudo ./ghostnet.sh
#    sudo ./ghostnet.sh --static --subnet 192.168.50.0/24 --gateway 192.168.50.1
#    sudo ./ghostnet.sh --iface wlan1 --dry-run
#
#  Dependencies:
#    nmcli, macchanger, iproute2, awk, coreutils
#
#  Notes:
#    - Must be run as root (for MAC/IP changes)
#    - Integrates with ghostctl via `rotate-net` and `verify-net` commands
# =============================================================================

set -euo pipefail

# Defaults (override with flags)
IFACE="${IFACE:-wlan0}"
MODE="${MODE:-dhcp}"          # dhcp|static
SUBNET="${SUBNET:-192.168.100.0/24}"
GATEWAY="${GATEWAY:-192.168.100.1}"
RANGE_MIN="${RANGE_MIN:-10}"
RANGE_MAX="${RANGE_MAX:-209}"
TIMEOUT="${TIMEOUT:-25}"
DRYRUN="${DRYRUN:-0}"

# Hardcoded log path to avoid $HOME issues under sudo
LOG_DIR="/home/kehd/ghostops/logs"
LOG_FILE="$LOG_DIR/ghostnet.log"

usage() {
  cat <<USG
ghostnet.sh — MAC/IP rotation with auto-reconnect + logging

Flags:
  --iface <name>         Interface (default: $IFACE)
  --dhcp                 Use DHCP after reconnect (default)
  --static               Assign randomized static IP after reconnect
  --subnet <CIDR>        Subnet for static mode (default: $SUBNET)
  --gateway <IP>         Gateway for static mode (default: $GATEWAY)
  --timeout <sec>        Connect wait timeout (default: $TIMEOUT)
  --dry-run              Show actions without applying
USG
}

# Parse flags
while [[ $# -gt 0 ]]; do
  case "$1" in
    --iface) IFACE="$2"; shift 2;;
    --dhcp) MODE="dhcp"; shift;;
    --static) MODE="static"; shift;;
    --subnet) SUBNET="$2"; shift 2;;
    --gateway|--gw) GATEWAY="$2"; shift 2;;
    --timeout) TIMEOUT="$2"; shift 2;;
    --dry-run) DRYRUN=1; shift;;
    -h|--help) usage; exit 0;;
    *) echo "[WARN] Unknown arg: $1" >&2; shift;;
  esac
done

if [[ $EUID -ne 0 ]]; then
  echo "[ERROR] Must be run as root."
  exit 1
fi

# Ensure log directory and file exist
mkdir -p "$LOG_DIR"
touch "$LOG_FILE"
chmod 664 "$LOG_FILE"

now() { date '+%Y-%m-%d %H:%M:%S%z'; }

active_conn_name() {
  nmcli -t -f NAME,DEVICE,TYPE connection show --active \
    | awk -F: -v dev="$IFACE" '$2==dev && $3=="wifi"{print $1; exit}'
}

active_ssid() {
  nmcli -t -f active,ssid dev wifi | awk -F: '$1=="yes"{print $2; exit}'
}

prefix_from_subnet() {
  echo "$SUBNET" | cut -d/ -f1 | awk -F. '{print $1 "." $2 "." $3}'
}

rand_host_octet() {
  awk -v min="$RANGE_MIN" -v max="$RANGE_MAX" 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'
}

OLD_MAC="$(cat /sys/class/net/$IFACE/address 2>/dev/null || echo unknown)"
OLD_IP="$(ip -4 -o addr show dev "$IFACE" | awk '{print $4}' | cut -d/ -f1 || true)"
CONN_NAME="$(active_conn_name || true)"
SSID="$(active_ssid || true)"

echo "📡 Disconnecting $IFACE (no RF-kill)..."
echo "    • conn_name='${CONN_NAME:-none}'  ssid='${SSID:-none}'"
if [[ "$DRYRUN" -eq 0 ]]; then
  nmcli dev disconnect "$IFACE" || true
fi

echo "🔁 Spoofing MAC on $IFACE..."
if [[ "$DRYRUN" -eq 0 ]]; then
  ip link set "$IFACE" down || true
  macchanger -r "$IFACE" || true
  ip link set "$IFACE" up || true
fi
NEW_MAC="$(cat /sys/class/net/$IFACE/address 2>/dev/null || echo unknown)"
echo "    • old_mac=$OLD_MAC  new_mac=$NEW_MAC"

echo "🔗 Reconnecting $IFACE..."
if [[ "$DRYRUN" -eq 0 ]]; then
  nmcli -w 5 dev connect "$IFACE" || true
fi

# Wait for 'connected' state (up to TIMEOUT)
echo -n "    • waiting for link"
for i in $(seq 1 "$TIMEOUT"); do
  state="$(nmcli -t -f DEVICE,STATE dev status | awk -F: -v d="$IFACE" '$1==d{print $2}')"
  [[ "$state" == "connected" ]] && { echo " — connected"; break; }
  sleep 1; echo -n "."
  [[ $i -eq "$TIMEOUT" ]] && echo " — timeout"
done

if [[ "$MODE" == "static" ]]; then
  PREF="$(prefix_from_subnet)"
  HOST="$(rand_host_octet)"
  NEW_IP="${PREF}.${HOST}"
  echo "🔁 Assigning randomized static IP: $NEW_IP (gw $GATEWAY) on $IFACE"
  if [[ "$DRYRUN" -eq 0 ]]; then
    ip addr flush dev "$IFACE" || true
    ip addr add "$NEW_IP/24" dev "$IFACE"
    ip route replace default via "$GATEWAY" dev "$IFACE"
  fi
else
  echo "🔁 DHCP mode — leaving IP assignment to NetworkManager/DHCP"
  NEW_IP="$(ip -4 -o addr show dev "$IFACE" | awk '{print $4}' | cut -d/ -f1 || true)"
fi

SSID_NOW="$(active_ssid || true)"
NEW_IP="${NEW_IP:-$(ip -4 -o addr show dev "$IFACE" | awk '{print $4}' | cut -d/ -f1)}"
OK=1

LINE="$(now) iface=$IFACE mode=$MODE ssid=\"${SSID_NOW:-${SSID:-none}}\" old_mac=$OLD_MAC new_mac=$NEW_MAC old_ip=${OLD_IP:-none} new_ip=${NEW_IP:-none} gw=${GATEWAY:-auto} ok=$OK"
echo "🧾 $LINE"
if [[ "$DRYRUN" -eq 0 ]]; then
  echo "$LINE" >> "$LOG_FILE"
fi

echo "✅ MAC/IP rotation complete"
